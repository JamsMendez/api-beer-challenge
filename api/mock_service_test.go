// Code generated by mockery v2.23.1. DO NOT EDIT.

package api_test

import (
	model "api-beer-challenge/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetBeer provides a mock function with given fields: ctx, id
func (_m *MockService) GetBeer(ctx context.Context, id uint64) (*model.Beer, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Beer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Beer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Beer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Beer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetBeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeer'
type MockService_GetBeer_Call struct {
	*mock.Call
}

// GetBeer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockService_Expecter) GetBeer(ctx interface{}, id interface{}) *MockService_GetBeer_Call {
	return &MockService_GetBeer_Call{Call: _e.mock.On("GetBeer", ctx, id)}
}

func (_c *MockService_GetBeer_Call) Run(run func(ctx context.Context, id uint64)) *MockService_GetBeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockService_GetBeer_Call) Return(_a0 *model.Beer, _a1 error) *MockService_GetBeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetBeer_Call) RunAndReturn(run func(context.Context, uint64) (*model.Beer, error)) *MockService_GetBeer_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeerBoxPrice provides a mock function with given fields: ctx, id, quantity, currency
func (_m *MockService) GetBeerBoxPrice(ctx context.Context, id uint64, quantity uint64, currency string) (float64, error) {
	ret := _m.Called(ctx, id, quantity, currency)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, string) (float64, error)); ok {
		return rf(ctx, id, quantity, currency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, string) float64); ok {
		r0 = rf(ctx, id, quantity, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, string) error); ok {
		r1 = rf(ctx, id, quantity, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetBeerBoxPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeerBoxPrice'
type MockService_GetBeerBoxPrice_Call struct {
	*mock.Call
}

// GetBeerBoxPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - quantity uint64
//   - currency string
func (_e *MockService_Expecter) GetBeerBoxPrice(ctx interface{}, id interface{}, quantity interface{}, currency interface{}) *MockService_GetBeerBoxPrice_Call {
	return &MockService_GetBeerBoxPrice_Call{Call: _e.mock.On("GetBeerBoxPrice", ctx, id, quantity, currency)}
}

func (_c *MockService_GetBeerBoxPrice_Call) Run(run func(ctx context.Context, id uint64, quantity uint64, currency string)) *MockService_GetBeerBoxPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(string))
	})
	return _c
}

func (_c *MockService_GetBeerBoxPrice_Call) Return(_a0 float64, _a1 error) *MockService_GetBeerBoxPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetBeerBoxPrice_Call) RunAndReturn(run func(context.Context, uint64, uint64, string) (float64, error)) *MockService_GetBeerBoxPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeers provides a mock function with given fields: ctx
func (_m *MockService) GetBeers(ctx context.Context) ([]model.Beer, error) {
	ret := _m.Called(ctx)

	var r0 []model.Beer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Beer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Beer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Beer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetBeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeers'
type MockService_GetBeers_Call struct {
	*mock.Call
}

// GetBeers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetBeers(ctx interface{}) *MockService_GetBeers_Call {
	return &MockService_GetBeers_Call{Call: _e.mock.On("GetBeers", ctx)}
}

func (_c *MockService_GetBeers_Call) Run(run func(ctx context.Context)) *MockService_GetBeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetBeers_Call) Return(_a0 []model.Beer, _a1 error) *MockService_GetBeers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetBeers_Call) RunAndReturn(run func(context.Context) ([]model.Beer, error)) *MockService_GetBeers_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBeer provides a mock function with given fields: ctx, input
func (_m *MockService) SaveBeer(ctx context.Context, input *model.InputBeer) (*model.Beer, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Beer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InputBeer) (*model.Beer, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InputBeer) *model.Beer); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Beer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InputBeer) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SaveBeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBeer'
type MockService_SaveBeer_Call struct {
	*mock.Call
}

// SaveBeer is a helper method to define mock.On call
//   - ctx context.Context
//   - input *model.InputBeer
func (_e *MockService_Expecter) SaveBeer(ctx interface{}, input interface{}) *MockService_SaveBeer_Call {
	return &MockService_SaveBeer_Call{Call: _e.mock.On("SaveBeer", ctx, input)}
}

func (_c *MockService_SaveBeer_Call) Run(run func(ctx context.Context, input *model.InputBeer)) *MockService_SaveBeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.InputBeer))
	})
	return _c
}

func (_c *MockService_SaveBeer_Call) Return(_a0 *model.Beer, _a1 error) *MockService_SaveBeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_SaveBeer_Call) RunAndReturn(run func(context.Context, *model.InputBeer) (*model.Beer, error)) *MockService_SaveBeer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
